#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@project: occurrence-abundance pattern (make data of Fig 5 - source code)
@author: Roman Zapien-Campos - 2021
"""

# Import functions
from sc_reduction import *


# Choose the panel to compute
panel = '5D' # Options are '5A', '5B', '5C', '5D'


### Parameters ###

## Fraction of immigrants
# Gini 0.3
p_G03 = np.array([0.00140663, 0.00311707, 0.00508116, 0.00586253, 0.0073288, 0.00851041, 0.00889045, 0.01230284, 0.01404587, 0.01561073, 0.01962825, 0.02030403, 0.02128218, 0.02146208, 0.02148506, 0.02179508, 0.02205183, 0.02210645, 0.0239036, 0.02391206, 0.02422098, 0.02505539, 0.02563695, 0.02598727, 0.02648725, 0.02654484, 0.02717888, 0.02795651, 0.02888, 0.02941713, 0.0306823, 0.03620973, 0.03659997, 0.03672017, 0.03720865, 0.03798073, 0.04161785, 0.04478403, 0.05691535, 0.0738289])
# Gini 0.6
p_G06 = np.array([0.00038154, 0.00067294, 0.00077313, 0.00084858, 0.00126614, 0.00137603, 0.00170499, 0.00173883, 0.00193053, 0.00216253, 0.00437584, 0.00527042, 0.00728132, 0.00754192, 0.00775608, 0.00803994, 0.01048105, 0.01178707, 0.01260198, 0.01373537, 0.01404538, 0.01485447, 0.01632661, 0.01833767, 0.02257611, 0.02528464, 0.02540005, 0.02571126, 0.02691791, 0.03328889, 0.03412534, 0.03504708, 0.03723251, 0.0373183, 0.0412504, 0.06049704, 0.07532528, 0.07580609, 0.09674053, 0.18218821])

## Growth rates
# SD 0.1
gR_SD01 = np.array([1.15442723, 0.85911785, 1.11160448, 1.02066184, 0.92910304, 0.89754369, 0.81035959, 1.0647798, 0.98090045, 1.04132257, 0.85088964, 1.04953219, 1.05582736, 0.82319735, 1.09151151, 1.15998802, 0.82941692, 1.0370813, 0.95696431, 0.99065505, 0.91642347, 1.02392111, 1.02467767, 0.96302918, 1.01826739, 1.04124979, 1.07662959, 1.20783799, 0.97987992, 1.14226125, 1.00054386, 0.94077612, 1.00486504, 0.96320097, 1.14489223, 1.02131939, 0.91426701, 0.88496494, 0.89403731, 1.06832477])
# SD 0.2
gR_SD02 = np.array([1.43183165, 0.94543488, 1.25867613, 1.13914629, 1.09700785, 0.86455114, 0.84272802, 1.25548744, 0.82308602, 0.9463721, 0.69242845, 0.85461497, 1.21694016, 1.2154563, 0.90189991, 1.05932552, 1.12243267, 0.96864969, 1.08004687, 0.58739385, 1.08045878, 0.53390802, 1.16716843, 1.01159071, 1.02969164, 0.82525878, 0.54028244, 0.95795269, 0.96973588, 0.85144338, 1.15555846, 1.26319712, 1.22722889, 0.94484014, 1.16288487, 0.70923355, 1.27742596, 0.72113621, 0.9222639, 1.08893227])

## Death rates
# SD 0.1
dR_SD01 = np.array([0.97997334, 0.97178519, 1.01221396, 1.07464284, 0.89822532, 1.05447841, 0.90908804, 0.93517044, 1.11642025, 1.0223452, 0.96517128, 1.00578925, 0.9853043, 0.82862568, 0.98050893, 1.06342287, 1.11187164, 1.11135766, 1.16597829, 1.12204569, 0.96069496, 1.01766923, 0.97712838, 1.07470396, 0.85933591, 1.09789077, 0.94291763, 0.87396482, 0.9675674, 1.19007246, 1.09704941, 0.91754573, 0.88923551, 0.97910369, 1.00315385, 1.01284054, 1.00109989, 0.76639059, 1.0966333, 0.97279744])
# SD 0.2
dR_SD02 = np.array([1.09225407, 0.96937414, 0.95851194, 1.08112366, 0.8576313, 0.95553886, 0.95575906, 0.70053154, 1.47494745, 1.19991147, 0.83695934, 1.0609339, 1.17491052, 0.91682502, 1.04822908, 1.15331921, 1.17118302, 1.18429391, 0.71618072, 0.67397284, 1.18141739, 1.04803977, 1.3441974, 0.21137807, 1.10227134, 0.97612519, 1.18817776, 0.83116942, 1.59655685, 1.19184434, 1.19972019, 1.40366754, 0.95708612, 1.18651522, 0.72474697, 0.86868896, 0.81539892, 1.15578666, 1.38192893, 1.13255427])

# Group the immigration fractions and growth and death rates
P_ = [p_G03, p_G06]
gR_ = [gR_SD01, gR_SD02]
dR_ = [dR_SD01, dR_SD02]

if panel == '5A':
    gini_i, sd_i = 0, 0
elif panel == '5B':
    gini_i, sd_i = 0, 1
elif panel == '5C':
    gini_i, sd_i = 1, 0
elif panel == '5D':
    gini_i, sd_i = 1, 1

# Overall prameters
N = int(1E3)
m = 1E-1 * N
S = 40
p = P_[gini_i]
gR = gR_[sd_i]
dR = dR_[sd_i]

# Vectors to store the computed values
P0_nneutral = np.zeros(S)
mean_freq_nneutral = np.zeros(S)

#print(panel)

# Compute the observables of each type
for i in range(S):
    
    #print(i)
    
    # Compute the probability distribution of type i
    P_ni_nneutral, n_j_nneutral = reduction_prob_dist(m, N, p, gR, dR, S, i)
    
    # Compute the occurrence and mean frequencies 
    P0_nneutral[i] = prob_occurrence(P_ni_nneutral)
    mean_freq_nneutral[i] = mean_abundance(P_ni_nneutral, N) / N
    
    #print(n_j_nneutral[:,0].sum(), '\n')

# Saved the compute values of the chosen panel
np.savez_compressed('data/%s.npz'%panel, N = N, m = m, S = S, p = p, gR = gR, dR = dR, P0_nneutral = P0_nneutral, mean_freq_nneutral = mean_freq_nneutral)